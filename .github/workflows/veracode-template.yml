name: Veracode Template

on:
  workflow_call:
    inputs:
      build-id:
        description: 'ID da build'
        required: true
        type: string
      project_veracode:
        description: 'Project'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        type: string

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      project_type: ${{ steps.set_type.outputs.project_type }}
      gradle_matrix: ${{ steps.detect_gradle.outputs.gradle_matrix }}
      maven_java: ${{ steps.detect_maven.outputs.maven_java }}
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      # Define o tipo de projeto (maven ou gradle) com base nos arquivos encontrados.
      - name: Definir Tipo de Projeto
        id: set_type
        run: |
          if [ -f "pom.xml" ]; then
            echo "::set-output name=project_type::maven"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "::set-output name=project_type::gradle"
          else
            echo "Nenhum arquivo de projeto conhecido encontrado."
            exit 1
          fi

      # Se for Maven, extrai a versão do Java do pom.xml.
      - name: Detectar Versão do Java no pom.xml
        if: steps.set_type.outputs.project_type == 'maven'
        id: detect_maven
        run: |
          JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
          echo "Maven Java Version: $JAVA_VERSION"
          echo "::set-output name=maven_java::$JAVA_VERSION"

      # Se for Gradle, tenta extrair a versão do Java em duas fontes:
      # 1. Pela seção compileOptions (sourceCompatibility = JavaVersion.VERSION_xx)
      # 2. Se não encontrar, busca no bloco defaultConfig por uma propriedade (usamos minSdk como exemplo)
      # Se nada for encontrado, definirá um fallback multi (matrix com 7, 17 e 21)
      - name: Detectar Versão do Java no Gradle
        if: steps.set_type.outputs.project_type == 'gradle'
        id: detect_gradle
        run: |
          # Seleciona o arquivo de build (Groovy ou Kotlin DSL)
          if [ -f "build.gradle" ]; then
            FILE="build.gradle"
          elif [ -f "build.gradle.kts" ]; then
            FILE="build.gradle.kts"
          else
            echo "Arquivo de build Gradle não encontrado."
            exit 1
          fi

          echo "Usando arquivo: $FILE"

          # Tenta extrair pela seção compileOptions:
          RAW=$(grep -oP "sourceCompatibility\s*=\s*JavaVersion\.VERSION_(\d+(?:[_\.]\d+)?)" "$FILE" | head -n1)
          if [ -z "$RAW" ]; then
            echo "Não encontrou versão em compileOptions."
            # Tenta extrair no bloco defaultConfig pela propriedade minSdk (por exemplo: minSdk = "21")
            RAW=$(sed -n '/defaultConfig {/,/}/{s/.*minSdk\s*=\s*["'\'']\K[0-9]+(?=["'\'']).*/p' "$FILE" | head -n1)
            if [ -n "$RAW" ]; then
              echo "Encontrou minSdk no defaultConfig: $RAW"
            fi
          else
            echo "Encontrou em compileOptions: $RAW"
          fi

          if [ -z "$RAW" ]; then
            echo "Nenhuma versão do Java encontrada; utilizando fallback multi."
            DETECTED="multi"
          else
            # Se RAW estiver no padrão "JavaVersion.VERSION_xx", extrai o número.
            if [[ "$RAW" == JavaVersion.VERSION_* ]]; then
              MAJOR=$(echo "$RAW" | sed -E 's/.*VERSION_([0-9]+)[_.]?.*/\1/')
              MINOR=$(echo "$RAW" | sed -E 's/.*VERSION_[0-9]+[_.]?([0-9]*)/\1/')
              if [ "$MAJOR" = "1" ] && [ -n "$MINOR" ]; then
                DETECTED="$MINOR"
              else
                DETECTED="$MAJOR"
              fi
            else
              # RAW já é apenas um número (extraído de minSdk, por exemplo)
              DETECTED="$RAW"
            fi
          fi

          echo "Versão detectada: $DETECTED"

          # Se não foi encontrada uma versão válida, define fallback multi.
          if [ "$DETECTED" = "multi" ]; then
            MATRIX='[7,17,21]'
          else
            MATRIX="[\"$DETECTED\"]"
          fi

          echo "Matrix para JDK: $MATRIX"
          echo "::set-output name=gradle_matrix::$MATRIX"

  build-maven:
    needs: detect
    if: needs.detect.outputs.project_type == 'maven'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar JDK para Maven
        uses: actions/setup-java@v3
        with:
          java-version: ${{ needs.detect.outputs.maven_java }}
          distribution: temurin
          cache: maven

      - name: Build Maven
        run: mvn clean package

  build-gradle:
    needs: detect
    if: needs.detect.outputs.project_type == 'gradle'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: ${{ fromJson(needs.detect.outputs.gradle_matrix) }}
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Configurar JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: temurin
          cache: gradle

      - name: Build Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build



      # Exemplo de etapa para preparar os artefatos para o Veracode (ajuste conforme sua necessidade)
      - name: Instalar CLI do Veracode e Autopack-Veracode
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
          
          # Define o diretório de saída de acordo com a ferramenta de build utilizada
          if [ "${{ env.java_maven }}" = "true" ]; then
            OUTPUT_DIR="target"
          elif [ "${{ env.java_gradle }}" = "true" ]; then
            OUTPUT_DIR="build/libs"
          else
            OUTPUT_DIR="."
          fi
          
          # Procura arquivos WAR, JAR ou ZIP no diretório de saída
          WAR_FILE=$(find $OUTPUT_DIR -maxdepth 1 -name "*.war" | head -n 1)
          JAR_FILE=$(find $OUTPUT_DIR -maxdepth 1 -name "*.jar" | head -n 1)
          
          echo "Arquivos encontrados: WAR: $WAR_FILE, JAR: $JAR_FILE"
      
          if [ -f "$WAR_FILE" ]; then
            echo "WAR encontrado: $WAR_FILE"
            # Copia o WAR para o diretório de artefatos com um nome fixo
            cp "$WAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
      
          elif [ -f "$JAR_FILE" ]; then
            echo "JAR encontrado: $JAR_FILE"
            cp "$JAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            # Compacta o JAR em um zip para padronizar, se necessário
      
          else
            echo "Nenhum WAR, JAR ou ZIP encontrado. Rodando Autopack..."
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output ${{ github.workspace }}/artifacts/${{ inputs.build-id }} --trust
      
            find ${{ github.workspace }}/artifacts/${{ inputs.build-id }} -name "*.zip" |
            while read filename; do unzip -o -d "$(dirname "$filename")" "$filename"; done
      
            rm -rf ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.zip
            zip analysisPack.zip -r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
          fi

      - name: Publicar Artefato para Análise
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
            
          retention-days: 1

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Executar Veracode SCA
        continue-on-error: true
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s – scan --update-advisor --allow-dirty

  pipeline_scan:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode Pipeline Scanner
        run: curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

      - name: Extrair Veracode Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip -d ${{ github.workspace }}/scanner

      - name: Executar Veracode Pipeline Scan
        id: pipeline_scan
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
        run: |
          # Procura pelo arquivo WAR
          WAR_FILE=$(find . -name "*.war" | head -n 1)
          # Procura pelo arquivo JAR (excluindo o pipeline-scan.jar)
          JAR_FILE=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n 1)
          
          if [ -f "$WAR_FILE" ]; then
            echo "Aplicação WAR detectada. Usando arquivo: $WAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$WAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          elif [ -f "$JAR_FILE" ]; then
            echo "Java build detectado. Usando arquivo: $JAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$JAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          else
            echo "Nenhum WAR ou JAR encontrado. Usando analysisPack.zip."
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file analysisPack.zip --issue_details true --fail_on_severity="Very High, High"
          fi

  sast:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise SAST
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode SAST Wrapper
        run: |
          curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar

      - name: Executar Veracode SAST
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          # Verifica se existe um WAR
          WAR_FILE=$(find . -maxdepth 2 -name "*.war" | head -n 1)
          if [ -f "$WAR_FILE" ]; then
            echo "Aplicação WAR detectada. Usando arquivo: $WAR_FILE"
            ARTIFACT="$WAR_FILE"
          else
            # Se não houver WAR, procura por um JAR (excluindo o vosp-api-wrappers)
            JAR_FILE=$(find . -maxdepth 2 -name "*.jar" -not -name "vosp-api-wrappers*.jar" | head -n 1)
            if [ -f "$JAR_FILE" ]; then
              echo "Java build detectado. Usando arquivo: $JAR_FILE"
              ARTIFACT="$JAR_FILE"
            else
              echo "Nenhum WAR ou JAR encontrado. Usando analysisPack.zip."
              ARTIFACT="analysisPack.zip"
            fi
          fi
      
          if [ "$ENVIRONMENT" == "prod" ]; then
            echo "Executando SAST em ambiente de produção..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid $VID -vkey $VKEY \
              -action uploadandscan \
              -appname "${{ inputs.project_veracode }}" \
              -version "${{ github.run_id }}" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox false
          else
            echo "Executando SAST em ambiente de sandbox..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid $VID -vkey $VKEY \
              -action uploadandscan \
              -appname "${{ inputs.project_veracode }}" \
              -version "${{ github.run_id }}" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox true \
              -sandboxname "$ENVIRONMENT"
          fi
