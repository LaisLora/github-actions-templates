name: Veracode Template

on:
  workflow_call:
    inputs:
      build-id:
        description: 'ID da build'
        required: true
        type: string
      project_veracode:
        description: 'Project'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        type: string

env:
  project: ${{ inputs.project_veracode }}
  environment: ${{ inputs.environment }}

jobs:
  autopack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      # Detectar ferramenta de build: Maven ou Gradle
      - name: Detectar Ferramenta de Build
        id: detect_build
        run: |
          if [ -f "pom.xml" ]; then
            echo "build_tool=maven" >> $GITHUB_ENV
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "build_tool=gradle" >> $GITHUB_ENV
          else
            echo "Nenhum arquivo de build encontrado (pom.xml ou build.gradle*). Abortando."
            exit 1
          fi

      # Detectar versão do Java no Gradle a partir do compiler.xml
      - name: Detectar Configurações do Projeto (Gradle)
        if: env.build_tool == 'gradle'
        id: detect_java_gradle
        run: |
          JAVA_VERSION=""

          # Buscar no compiler.xml
          COMPILER_XML=$(find . -type f -name "compiler.xml" | head -n1)
          if [ -n "$COMPILER_XML" ]; then
            echo "Verificando $COMPILER_XML para encontrar a versão do Java..."
            JAVA_VERSION=$(awk -F 'target="' '{print $2}' "$COMPILER_XML" | awk -F '"' '{print $1}' | head -n1)
          fi

          # Caso não encontre, usa um valor padrão
          if [ -z "$JAVA_VERSION" ]; then
            echo "Nenhuma versão do Java detectada em $COMPILER_XML. Usando Java 21 como padrão."
            JAVA_VERSION=21
          fi

          echo "Versão do Java detectada: $JAVA_VERSION"
          echo "java_version=$JAVA_VERSION" >> $GITHUB_ENV

      # Configurar JDK para Gradle
      - name: Configurar JDK e Gradle
        if: env.build_tool == 'gradle'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.java_version }}
          distribution: temurin
          cache: gradle

      # Compilar Projeto Gradle
      - name: Compilar Projeto Gradle
        if: env.build_tool == 'gradle'
        run: |
          echo "Compilando projeto Gradle com Java ${{ env.java_version }}..."
          if [ -f "./gradlew" ]; then
            chmod +x gradlew
            ./gradlew clean build
          else
            gradle clean build
          fi

      # Instalar CLI do Veracode e empacotar artefatos para análise
      - name: Instalar CLI do Veracode e Autopack-Veracode
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/artifacts/${{ inputs.build-id }}"
          mkdir -p "$ARTIFACT_DIR"
      
          if [ "${{ env.build_tool }}" = "gradle" ]; then
            WAR_FILE=$(find build/libs/ -maxdepth 1 -name "*.war" | head -n 1)
            JAR_FILE=$(find build/libs/ -maxdepth 1 -name "*.jar" | head -n 1)
          fi
      
          if [ -f "$WAR_FILE" ]; then
            echo "WAR encontrado: $WAR_FILE"
            cp "$WAR_FILE" "$ARTIFACT_DIR/application.war"
          elif [ -f "$JAR_FILE" ]; then
            echo "JAR encontrado: $JAR_FILE"
            cp "$JAR_FILE" "$ARTIFACT_DIR/application.jar"
          else
            echo "Nenhum WAR, JAR ou ZIP encontrado. Rodando Autopack..."
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output "$ARTIFACT_DIR" --trust
          fi

      - name: Publicar Artefato para Análise
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
          retention-days: 1

  pipeline_scan:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode Pipeline Scanner
        run: curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

      - name: Extrair Veracode Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip -d ${{ github.workspace }}/scanner

      - name: Executar Veracode Pipeline Scan
        id: pipeline_scan
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
        run: |
          JAR_FILE=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n 1)
          
          if [ -f "$JAR_FILE" ]; then
            echo "Java build detectado. Usando arquivo: $JAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$JAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          else
            echo "Nenhum JAR encontrado. Usando analysisPack.zip."
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file analysisPack.zip --issue_details true --fail_on_severity="Very High, High"
          fi
