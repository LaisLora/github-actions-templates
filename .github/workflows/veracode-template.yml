name: Veracode Template

on:
  workflow_call:
    inputs:
      build-id:
        description: 'ID da build'
        required: true
        type: string
      project_veracode:
        description: 'Project'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        type: string

env:
  project: ${{ inputs.project_veracode }}
  environment: ${{ inputs.environment }}

jobs:
  autopack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      # Detecta se é um projeto Maven (presença do pom.xml)
      - name: Detectar Projeto Java-Maven
        id: check_maven
        run: |
          if [ -f "pom.xml" ]; then
            echo "java_maven=true" >> $GITHUB_ENV
          else
            echo "java_maven=false" >> $GITHUB_ENV
          fi

      # Detecta se é um projeto Gradle (presença do build.gradle ou build.gradle.kts)
      - name: Detectar Projeto Java-Gradle
        id: check_gradle
        run: |
          if [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "java_gradle=true" >> $GITHUB_ENV
          else
            echo "java_gradle=false" >> $GITHUB_ENV
          fi

      # Para projetos Maven: extrai a versão do Java do pom.xml
      - name: Detectar versão do Java no pom.xml
        if: env.java_maven == 'true'
        id: detect_java_maven
        run: |
          # Tenta extrair o valor da tag <maven.compiler.source>; se não encontrar, usa "11"
          JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
          echo "Versão do Java detectada (Maven): $JAVA_VERSION"
          echo "java_version_maven=$JAVA_VERSION" >> $GITHUB_OUTPUT

      # Para projetos Gradle: extrai a versão do Java do build.gradle ou build.gradle.kts
      - name: Detectar versão do Java no Gradle
        if: env.java_gradle == 'true'
        id: detect_java_gradle
        run: |
          if [ -f "build.gradle" ]; then
            JAVA_VERSION=$(grep -oP "sourceCompatibility\s*=?\s*['\"]?\K[0-9.]+" build.gradle || echo "11")
          elif [ -f "build.gradle.kts" ]; then
            JAVA_VERSION=$(grep -oP "sourceCompatibility\s*=?\s*['\"]?\K[0-9.]+" build.gradle.kts || echo "11")
          else
            JAVA_VERSION="11"
          fi
          echo "Versão do Java detectada (Gradle): $JAVA_VERSION"
          echo "java_version_gradle=$JAVA_VERSION" >> $GITHUB_OUTPUT

      # Configura o JDK para projeto Maven e instala as dependências
      - name: Configurar JDK para Maven e instalar dependências
        if: env.java_maven == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.detect_java_maven.outputs.java_version_maven }}
          distribution: temurin
          cache: maven

      - name: Instalar dependências Maven
        if: env.java_maven == 'true'
        run: mvn dependency:resolve

      # Configura o JDK para projeto Gradle e instala as dependências
      - name: Configurar JDK para Gradle e instalar dependências
        if: env.java_gradle == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.detect_java_gradle.outputs.java_version_gradle }}
          distribution: temurin
          cache: gradle

      - name: Instalar dependências Gradle
        if: env.java_gradle == 'true'
        run: |
          # Garante permissão para o wrapper e baixa as dependências
          chmod +x gradlew
          ./gradlew --no-daemon dependencies

      # Build do projeto Maven
      - name: Compilar Projeto Maven
        if: env.java_maven == 'true'
        run: mvn clean package

      # Build do projeto Gradle
      - name: Compilar Projeto Gradle
        if: env.java_gradle == 'true'
        run: |
          chmod +x gradlew
          ./gradlew clean build


      # Exemplo de etapa para preparar os artefatos para o Veracode (ajuste conforme sua necessidade)
      - name: Instalar CLI do Veracode e Autopack-Veracode
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
          
          # Define o diretório de saída de acordo com a ferramenta de build utilizada
          if [ "${{ env.java_maven }}" = "true" ]; then
            OUTPUT_DIR="target"
          elif [ "${{ env.java_gradle }}" = "true" ]; then
            OUTPUT_DIR="build/libs"
          else
            OUTPUT_DIR="."
          fi
          
          # Procura arquivos WAR, JAR ou ZIP no diretório de saída
          WAR_FILE=$(find $OUTPUT_DIR -maxdepth 1 -name "*.war" | head -n 1)
          JAR_FILE=$(find $OUTPUT_DIR -maxdepth 1 -name "*.jar" | head -n 1)
          
          echo "Arquivos encontrados: WAR: $WAR_FILE, JAR: $JAR_FILE"
      
          if [ -f "$WAR_FILE" ]; then
            echo "WAR encontrado: $WAR_FILE"
            # Copia o WAR para o diretório de artefatos com um nome fixo
            cp "$WAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
      
          elif [ -f "$JAR_FILE" ]; then
            echo "JAR encontrado: $JAR_FILE"
            cp "$JAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            # Compacta o JAR em um zip para padronizar, se necessário
      
          else
            echo "Nenhum WAR, JAR ou ZIP encontrado. Rodando Autopack..."
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output ${{ github.workspace }}/artifacts/${{ inputs.build-id }} --trust
      
            find ${{ github.workspace }}/artifacts/${{ inputs.build-id }} -name "*.zip" |
            while read filename; do unzip -o -d "$(dirname "$filename")" "$filename"; done
      
            rm -rf ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.zip
            zip analysisPack.zip -r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
          fi

      - name: Publicar Artefato para Análise
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
            
          retention-days: 1

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Executar Veracode SCA
        continue-on-error: true
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s – scan --update-advisor --allow-dirty

  pipeline_scan:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode Pipeline Scanner
        run: curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

      - name: Extrair Veracode Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip -d ${{ github.workspace }}/scanner

      - name: Executar Veracode Pipeline Scan
        id: pipeline_scan
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
        run: |
          # Procura pelo arquivo WAR
          WAR_FILE=$(find . -name "*.war" | head -n 1)
          # Procura pelo arquivo JAR (excluindo o pipeline-scan.jar)
          JAR_FILE=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n 1)
          
          if [ -f "$WAR_FILE" ]; then
            echo "Aplicação WAR detectada. Usando arquivo: $WAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$WAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          elif [ -f "$JAR_FILE" ]; then
            echo "Java build detectado. Usando arquivo: $JAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$JAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          else
            echo "Nenhum WAR ou JAR encontrado. Usando analysisPack.zip."
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file analysisPack.zip --issue_details true --fail_on_severity="Very High, High"
          fi

  sast:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise SAST
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode SAST Wrapper
        run: |
          curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar

      - name: Executar Veracode SAST
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          # Verifica se existe um WAR
          WAR_FILE=$(find . -maxdepth 2 -name "*.war" | head -n 1)
          if [ -f "$WAR_FILE" ]; then
            echo "Aplicação WAR detectada. Usando arquivo: $WAR_FILE"
            ARTIFACT="$WAR_FILE"
          else
            # Se não houver WAR, procura por um JAR (excluindo o vosp-api-wrappers)
            JAR_FILE=$(find . -maxdepth 2 -name "*.jar" -not -name "vosp-api-wrappers*.jar" | head -n 1)
            if [ -f "$JAR_FILE" ]; then
              echo "Java build detectado. Usando arquivo: $JAR_FILE"
              ARTIFACT="$JAR_FILE"
            else
              echo "Nenhum WAR ou JAR encontrado. Usando analysisPack.zip."
              ARTIFACT="analysisPack.zip"
            fi
          fi
      
          if [ "$ENVIRONMENT" == "prod" ]; then
            echo "Executando SAST em ambiente de produção..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid $VID -vkey $VKEY \
              -action uploadandscan \
              -appname "${{ inputs.project_veracode }}" \
              -version "${{ github.run_id }}" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox false
          else
            echo "Executando SAST em ambiente de sandbox..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid $VID -vkey $VKEY \
              -action uploadandscan \
              -appname "${{ inputs.project_veracode }}" \
              -version "${{ github.run_id }}" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox true \
              -sandboxname "$ENVIRONMENT"
          fi
