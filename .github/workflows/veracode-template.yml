# .github/workflows/veracode-template.yml

on:
  workflow_call:
    # SEGREGA√á√ÉO DE SEGREDOS: cada secret precisa ser referenciado literalmente
    secrets:
      SCA_ORGANIZACIONAL:      # token do agente SCA
        required: true
      SRCCLR_WORKSPACE_SLUG:   # slug principal do workspace
        required: true
      SRCCLR_WORKSPACE_SLUG01: # slug secund√°rio do workspace
        required: true
      APIID_VERACODE:          # credencial API Veracode (SAST/Pipeline Scan)
        required: true
      APIKEY_VERACODE:         # credencial API Veracode (SAST/Pipeline Scan)
        required: true

    inputs:
      build-id:
        description: 'ID da build (p.ex. ${{ github.run_id }}.${{ github.run_number }})'
        required: true
        type: string
      environment:
        description: 'Ambiente de execu√ß√£o (p.ex. dev, qa, prod)'
        required: true
        type: string
      project_veracode:
        description: 'Chave/slug l√≥gico do projeto para Veracode'
        required: true
        type: string
      veracode_policy_name:
        description: 'Nome da policy do Veracode'
        required: true
        type: string

jobs:
  # 1) JOB DE MAPEAMENTO: extrai o slug correto conforme project_veracode
  prepare-mapping:
    name: üìç Prepare Workspace Mapping
    runs-on: ubuntu-latest
    env:
      SLUG_PRIMARY:   ${{ secrets.SRCCLR_WORKSPACE_SLUG }}
      SLUG_SECONDARY: ${{ secrets.SRCCLR_WORKSPACE_SLUG01 }}
      # Para adicionar mais workspaces, declare:
      # SLUG_TERTIARY:   ${{ secrets.SRCCLR_WORKSPACE_SLUG02 }}
    outputs:
      workspace_slug: ${{ steps.map.outputs.slug }}
    steps:
      - id: map
        name: üîÑ Mapear projeto ‚Üí workspace slug
        shell: bash
        run: |
          # 1) Defina aqui o mapeamento projeto ‚Üí nome da vari√°vel de ambiente
          declare -A WORKSPACE_MAP=(
            ["verademo3"]="SLUG_SECONDARY"
            ["app-frontend"]="SLUG_PRIMARY"
            # ... inclua todos os seus reposit√≥rios
          )

          PROJ="${{ inputs.project_veracode }}"
          VAR_NAME="${WORKSPACE_MAP[$PROJ]}"

          if [[ -z "$VAR_NAME" ]]; then
            echo "::error ::Projeto '$PROJ' n√£o mapeado. Atualize WORKSPACE_MAP!" >&2
            exit 1
          fi

          # 2) Expans√£o indireta para obter o slug real
          SELECTED_SLUG="${!VAR_NAME}"
          echo "slug=$SELECTED_SLUG" >> $GITHUB_OUTPUT
          echo "‚úîÔ∏è Projeto '$PROJ' ‚Üí workspace_slug='$SELECTED_SLUG'"

  # 2) JOB DE AUTOPACK: empacota o artefato para SAST/Pipeline Scan
  autopack:
    name: üöÄ AutoPack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: Detectar Projeto Java-Maven
        id: check_maven
        shell: bash
        run: |
          if [[ -f "pom.xml" ]]; then
            echo "java_maven=true" >> $GITHUB_OUTPUT
          else
            echo "java_maven=false" >> $GITHUB_OUTPUT
          fi

      - name: Detectar vers√£o do Java no pom.xml
        if: steps.check_maven.outputs.java_maven == 'true'
        id: detect_java
        shell: bash
        run: |
          JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
          if [[ "$JAVA_VERSION" == "11" ]]; then
            JAVA_VERSION=$(grep -oPm1 "(?<=<java.version>)[^<]+" pom.xml || echo "11")
          fi
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Configurar JDK e Maven
        if: steps.check_maven.outputs.java_maven == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.detect_java.outputs.java_version }}
          distribution: temurin
          cache: maven

      - name: Compilar Projeto Maven
        if: steps.check_maven.outputs.java_maven == 'true'
        shell: bash
        run: mvn clean package -DskipTests

      - name: Instalar CLI do Veracode e Autopack
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
          WAR=$(find target/ -maxdepth 1 -name "*.war" | head -n1)
          JAR=$(find target/ -maxdepth 1 -name "*.jar" | head -n1)
          if [[ -f "$WAR" ]]; then
            cp "$WAR" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
          elif [[ -f "$JAR" ]]; then
            cp "$JAR" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
          else
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output ${{ github.workspace }}/artifacts/${{ inputs.build-id }} --trust
            find ${{ github.workspace }}/artifacts/${{ inputs.build-id }} -name "*.zip" \
              | while read f; do unzip -o -d "$(dirname "$f")" "$f"; done
            rm -rf ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.zip
            zip analysisPack.zip -r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
          fi

      - name: Publicar Artefato
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/**

  # 3) JOB DE SCA: roda o scan de dependencies paralelo
  sca:
    name: üîç Veracode SCA
    runs-on: ubuntu-latest
    needs: [prepare-mapping]
    env:
      SRCCLR_API_TOKEN:      ${{ secrets.SCA_ORGANIZACIONAL }}
      SRCCLR_WORKSPACE_SLUG: ${{ needs.prepare-mapping.outputs.workspace_slug }}
    steps:
      - uses: actions/checkout@v4
      - name: Executar SCA (SourceClear)
        shell: bash

        run: |
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan --update-advisor --allow-dirty

  # 4) JOB DE PIPELINE SCAN: usa o artefato e o mesmo workspace_slug
  scan:
    name: ‚è±Ô∏è Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: [autopack, prepare-mapping]
    env:
      VID:                    ${{ secrets.APIID_VERACODE }}
      VKEY:                   ${{ secrets.APIKEY_VERACODE }}
      SRCCLR_WORKSPACE_SLUG:  ${{ needs.prepare-mapping.outputs.workspace_slug }}
    steps:
      - name: Baixar artefato
        uses: actions/download-artifact@v4
        with: { name: analysisPack }
      - name: Detectar arquivo para scan
        id: detect_artifact
        shell: bash
        run: |
          WAR=$(find . -name "*.war" | head -n1)
          JAR=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n1)
          if [[ -f "$WAR" ]]; then
            echo "artifact_file=$WAR" >> $GITHUB_OUTPUT
          elif [[ -f "$JAR" ]]; then
            echo "artifact_file=$JAR" >> $GITHUB_OUTPUT
          else
            echo "::error ::Nenhum WAR/JAR encontrado" && exit 1
          fi
      - name: Substituir policy se necess√°rio
        id: policy-remap
        shell: bash
        run: |
          echo "policy=${{ inputs.veracode_policy_name }}" >> $GITHUB_OUTPUT
          declare -A PMAP=(
            ["verademo3"]="AFRIKA_AST"
            ["node.js.verademo"]="Veracode Recommended Very High + SCA v1"
          )
          ALT=${PMAP[${{ inputs.project_veracode }}]}
          if [[ -n "$ALT" ]]; then
            echo "policy=$ALT" >> $GITHUB_OUTPUT
          fi
      - name: Executar Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.APIID_VERACODE }}
          vkey: ${{ secrets.APIKEY_VERACODE }}
          file: ${{ steps.detect_artifact.outputs.artifact_file }} --issue_details true
          veracode_policy_name: ${{ steps.policy-remap.outputs.policy }}
          fail_build: ${{ inputs.environment == 'prod' }}

  # 5) JOB DE SAST: wrapper Java, usa o mesmo artefato
  sast:
    name: ‚öôÔ∏è Veracode SAST
    runs-on: ubuntu-latest
    needs: autopack
    env:
      VID:         ${{ secrets.APIID_VERACODE }}
      VKEY:        ${{ secrets.APIKEY_VERACODE }}
      ENVIRONMENT: ${{ inputs.environment }}
    steps:
      - name: Baixar artefato
        uses: actions/download-artifact@v4
        with: { name: analysisPack }
      - name: Download SAST Wrapper
        shell: bash
        run: |
          curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar
      - name: Mapear nome do app se preciso
        id: project-remap
        shell: bash
        run: |
          echo "app=${{ inputs.project_veracode }}" >> $GITHUB_OUTPUT
          declare -A AMAP=(
            ["nomeprojetozuado"]="novonomeprojeto"
            ["nomeprojetozuado02"]="novonomeprojeto02"
          )
          ALT=${AMAP[${{ inputs.project_veracode }}]}
          if [[ -n "$ALT" ]]; then
            echo "app=$ALT" >> $GITHUB_OUTPUT
          fi
      - name: Executar SAST
        shell: bash
        run: |
          ART=$(find . -maxdepth 2 -name "*.war" | head -n1)
          if [[ -z "$ART" ]]; then
            ART=$(find . -maxdepth 2 -name "*.jar" -not -name "vosp-api-wrappers*.jar" | head -n1)
            [ -z "$ART" ] && ART="analysisPack.zip"
          fi

          java -jar vosp-api-wrappers-java-24.7.14.0.jar \
            -vid $VID -vkey $VKEY \
            -action uploadandscan \
            -appname "${{ steps.project-remap.outputs.app }}" \
            -version "${{ inputs.build-id }}" \
            -filepath "$ART" \
            -createprofile true \
            -deleteincompletescan 2 \
            $( [[ "$ENVIRONMENT" == "prod" ]] && echo "-createsandbox false" || echo "-createsandbox true -sandboxname $ENVIRONMENT -debug" )
