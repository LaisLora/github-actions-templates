name: Veracode Template

on:
  workflow_call:
    inputs:
      build-id:
        description: 'ID da build'
        required: true
        type: string

      project_veracode:
        description: 'Nome da aplicação no Veracode'
        required: true
        type: string

      environment:
        description: 'Ambiente para upload/scan (sandbox ou prod)'
        required: true
        type: string

env:
  project: ${{ inputs.project_veracode }}
  environment: ${{ inputs.environment }}

jobs:
  autopack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Detectar Build Tool
        id: detect_build
        run: |
          echo "===> Iniciando detecção de tecnologia..."
          if [ -f "pom.xml" ]; then
            echo "===> Foi detectado Maven (pom.xml encontrado)."
            echo "build_system=maven" >> $GITHUB_ENV
          elif [ -f "build.gradle" ]; then
            echo "===> Foi detectado Gradle (build.gradle encontrado)."
            echo "build_system=gradle" >> $GITHUB_ENV
          else
            echo "===> Nenhum arquivo de build Maven ou Gradle encontrado. Será usado autopack."
            echo "build_system=none" >> $GITHUB_ENV

      - name: Configurar JDK 11
        if: env.build_system != 'none'
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Compilar (Maven)
        if: env.build_system == 'maven'
        run: |
          echo "===> Iniciando build Maven..."
          mvn clean package

      - name: Compilar (Gradle)
        if: env.build_system == 'gradle'
        run: |
          echo "===> Iniciando build Gradle..."
          chmod +x gradlew
          ./gradlew build

      - name: Instalar Veracode CLI / Empacotar
        run: |
          echo "===> Preparando diretório de artifacts..."
          mkdir -p ${{ github.workspace }}/artifacts/${{ inputs.build-id }}

          echo "===> Buscando JAR/WAR gerado (se for Maven ou Gradle)..."
          JAR_FILE=""
          if [ "${{ env.build_system }}" = "maven" ]; then
            JAR_FILE=$(find target/ -name "*.jar" -o -name "*.war" | head -n 1)
          elif [ "${{ env.build_system }}" = "gradle" ]; then
            JAR_FILE=$(find build/libs/ -name "*.jar" -o -name "*.war" | head -n 1)
          fi

          if [ -n "$JAR_FILE" ] && [ -f "$JAR_FILE" ]; then
            echo "===> Build Java detectado. Copiando: $JAR_FILE"
            cp "$JAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
          else
            echo "===> Não é projeto Java OU nenhum JAR/WAR encontrado. Instalar Veracode CLI para autopack..."
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh

            echo "===> Executando veracode package --source ."
            ./veracode package --source . \
                               --output ${{ github.workspace }}/artifacts/${{ inputs.build-id }} \
                               --trust

            echo "===> Descompactando arquivos ZIP gerados pelo autopack..."
            find ${{ github.workspace }}/artifacts/${{ inputs.build-id }} -name "*.zip" |
              while read filename; do
                unzip -o "$filename" -d "$(dirname "$filename")"
              done

            echo "===> Removendo arquivos ZIP originais..."
            rm -rf ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.zip

            echo "===> Consolidando tudo em analysisPack.zip..."
            zip -r analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
          fi

      - name: Publicar Artefato
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Executar Veracode SCA
        continue-on-error: true
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          echo "===> Executando Veracode SCA..."
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s – scan --update-advisor --allow-dirty

  pipeline_scan:
    runs-on: ubuntu-latest
    needs: autopack

    steps:
      - name: Baixar Artefato para Pipeline Scan
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode Pipeline Scanner
        run: |
          echo "===> Baixando pipeline-scan-LATEST.zip..."
          curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

      - name: Extrair Veracode Pipeline Scanner
        run: |
          echo "===> Extraindo pipeline-scan-LATEST.zip..."
          unzip pipeline-scan-LATEST.zip -d ${{ github.workspace }}/scanner

      - name: Ajustar Permissões do Artefato
        run: |
          echo "===> Ajustando permissões dos artefatos..."
          chmod +r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.jar || true
          chmod +r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip || true

      - name: Executar Veracode Pipeline Scan
        id: pipeline_scan
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
        run: |
          echo "===> Iniciando Pipeline Scan..."
          JAR_FILE="${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar"

          if [ -f "$JAR_FILE" ]; then
            echo "===> Arquivo JAR encontrado: $JAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$JAR_FILE" \
              --issue_details true \
              --fail_on_severity="Very High, High"
          else
            echo "===> Nenhum arquivo .jar encontrado. Usando analysisPack.zip..."
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip \
              --issue_details true \
              --fail_on_severity="Very High, High"

  sast:
    runs-on: ubuntu-latest
    needs: autopack

    steps:
      - name: Baixar Artefato para Análise SAST
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode SAST Wrapper
        run: |
          echo "===> Baixando Veracode SAST Wrapper..."
          curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar

      - name: Executar Veracode SAST
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          echo "===> Iniciando processo de SAST..."
          JAR_FILE="${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar"

          if [ "$ENVIRONMENT" == "prod" ]; then
            echo "===> Ambiente de Produção selecionado..."
            if [ -f "$JAR_FILE" ]; then
              echo "===> Enviando JAR para análise: $JAR_FILE"
              java -jar vosp-api-wrappers-java-24.7.14.0.jar \
                -vid $VID -vkey $VKEY \
                -action uploadandscan \
                -appname "${{ inputs.project_veracode }}" \
                -version "${{ github.run_id }}" \
                -filepath "$JAR_FILE" \
                -createprofile true \
                -deleteincompletescan 2 \
                -createsandbox false
            else
              echo "===> Nenhum .jar encontrado, enviando analysisPack.zip"
              java -jar vosp-api-wrappers-java-24.7.14.0.jar \
                -vid $VID -vkey $VKEY \
                -action uploadandscan \
                -appname "${{ inputs.project_veracode }}" \
                -version "${{ github.run_id }}" \
                -filepath ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip \
                -createprofile true \
                -deleteincompletescan 2 \
                -createsandbox false
            fi
          else
            echo "===> Ambiente de SANDBOX '${ENVIRONMENT}' selecionado..."
            if [ -f "$JAR_FILE" ]; then
              echo "===> Enviando JAR para análise: $JAR_FILE"
              java -jar vosp-api-wrappers-java-24.7.14.0.jar \
                -vid $VID -vkey $VKEY \
                -action uploadandscan \
                -appname "${{ inputs.project_veracode }}" \
                -version "${{ github.run_id }}" \
                -filepath "$JAR_FILE" \
                -createprofile true \
                -deleteincompletescan 2 \
                -createsandbox true \
                -sandboxname "$ENVIRONMENT"
            else
              echo "===> Nenhum .jar encontrado, enviando analysisPack.zip"
              java -jar vosp-api-wrappers-java-24.7.14.0.jar \
                -vid $VID -vkey $VKEY \
                -action uploadandscan \
                -appname "${{ inputs.project_veracode }}" \
                -version "${{ github.run_id }}" \
                -filepath ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip \
                -createprofile true \
                -deleteincompletescan 2 \
                -createsandbox true \
                -sandboxname "$ENVIRONMENT"
            fi

