# .github/workflows/veracode-template.yml JAVA MAVEN && JAVASCRIPT 

on:
  workflow_call:
    inputs:
      build-id:
        description: 'ID da build'
        required: true
        type: string
      environment:
        description: 'Ambiente (dev, qa, prod)'
        required: true
        type: string
      project_veracode:
        description: 'Chave l√≥gica do projeto para Veracode'
        required: true
        type: string
      veracode_policy_name:
        description: 'Nome da policy do Veracode'
        required: true
        type: string

jobs:

  # ‚îÄ‚îÄ‚îÄ AutoPack ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  autopack:
    name: üöÄ AutoPack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do C√≥digo
        uses: actions/checkout@v4

      - name: Detectar Projeto Java-Maven
        id: check_maven
        shell: bash
        run: |
          if [[ -f "pom.xml" ]]; then
            echo "java_maven=true" >> $GITHUB_OUTPUT
          else
            echo "java_maven=false" >> $GITHUB_OUTPUT
          fi

      - name: Detectar vers√£o do Java
        if: steps.check_maven.outputs.java_maven == 'true'
        id: detect_java
        shell: bash
        run: |
          JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Configurar JDK e Maven
        if: steps.check_maven.outputs.java_maven == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.detect_java.outputs.java_version }}
          distribution: temurin
          cache: maven

      - name: Compilar Projeto Maven
        if: steps.check_maven.outputs.java_maven == 'true'
        shell: bash
        run: mvn clean package -DskipTests

      - name: Empacotar Artefatos para Scan
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
          WAR=$(find target/ -maxdepth 1 -name "*.war" | head -n1)
          JAR=$(find target/ -maxdepth 1 -name "*.jar" | head -n1)
          if [[ -f "$WAR" ]]; then
            cp "$WAR" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
          elif [[ -f "$JAR" ]]; then
            cp "$JAR" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
          else
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output ${{ github.workspace }}/artifacts/${{ inputs.build-id }} --trust
            find ${{ github.workspace }}/artifacts/${{ inputs.build-id }} -name "*.zip" \
              | while read f; do unzip -o -d "$(dirname "$f")" "$f"; done
            rm -rf ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.zip
            zip analysisPack.zip -r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
          fi

      - name: Publicar Artefato
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/**


  # ‚îÄ‚îÄ‚îÄ Veracode SCA (com Workspace Map no pr√≥prio job) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  sca:
    name: SCA
    runs-on: ubuntu-24.04

  # 3.1 ‚Äì Exp√µe TODOS os secrets de slug como vari√°veis de ambiente
  #       Assim podemos referenci√°-los por expans√£o indireta (${!var})
    env:
      # Token do agente organizacional
      SRCCLR_API_TOKEN: ${{ secrets.SCA_ORGANIZACIONAL }}
  
      # Slugs dos workspaces (adicione quantos precisar)
      WORKSPACE_JAVA:   ${{ secrets.WORKSPACE_JAVA }}
      WORKSPACE_WEBAPP: ${{ secrets.WORKSPACE_WEBAPP }}
      WORKSPACE_AKS:    ${{ secrets.WORKSPACE_AKS }}
      WORKSPACE_KAFKA:  ${{ secrets.WORKSPACE_KAFKA }}
  
    steps:
      - uses: actions/checkout@v4
  
      # 3.2 ‚Äì Resolve dinamicamente qual secret cont√©m o slug
      - name: Resolve workspace slug
        id: slug
        shell: bash
        run: |
          declare -A WORKSPACE_SECRET_MAP
          WORKSPACE_SECRET_MAP["verademo3"]="WORKSPACE_JAVA"
          WORKSPACE_SECRET_MAP["clienterei-frontend"]="WORKSPACE_WEBAPP"
          WORKSPACE_SECRET_MAP["clientereides"]="WORKSPACE_AKS"
          # ‚Üë mantenha a tabela empresarial aqui
  
          secret_name="${WORKSPACE_SECRET_MAP[${{ inputs.project_veracode }}]}"
  
          if [[ -z "$secret_name" ]]; then
            echo "::error::Projeto '${{ inputs.project_veracode }}' sem mapeamento de workspace."
            exit 1
          fi
  
          # Expans√£o indireta: obt√©m o valor do secret ($WORKSPACE_JAVA ‚Üí slug real)
          slug_value="${!secret_name}"
          echo "slug=$slug_value" >>"$GITHUB_OUTPUT"
          echo "Usando workspace '$slug_value' (secret: $secret_name)"
  
      # 3.3 ‚Äì Executa o agente SCA apontando para o slug resolvido
      - name: Run Veracode SCA scan
        env:
          SRCCLR_WORKSPACE_SLUG: ${{ steps.slug.outputs.slug }}
        run: |
          curl -sSL https://download.sourceclear.com/ci.sh \
            | bash -s -- scan --update-advisor --allow-dirty


  # ‚îÄ‚îÄ‚îÄ Veracode Pipeline Scan (mant√©m policy remap intacto) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  scan:
    name: ‚è±Ô∏è Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: autopack
    env:
      VID: ${{ secrets.VERACODE_API_ID }}
      VKEY: ${{ secrets.AVERACODE_API_KEY }}
      # usa o mesmo workspace slug gerado no SCA
    outputs:
      app_name: ${{ steps.map-project.outputs.app }}
    steps:
      - name: Baixar artefato
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Detectar arquivo para scan
        id: detect_artifact
        shell: bash
        run: |
          WAR=$(find . -name "*.war" | head -n1)
          JAR=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n1)
          if [[ -f "$WAR" ]]; then
            echo "artifact_file=$WAR" >> $GITHUB_OUTPUT
          elif [[ -f "$JAR" ]]; then
            echo "artifact_file=$JAR" >> $GITHUB_OUTPUT
          else
            echo "::error ::Nenhum WAR/JAR encontrado" && exit 1
          fi

      - name: Policy Name Substitution
        id: policy-name-sub
        run: |
        
            # Setar policy default
            echo "policy_veracode_sub=${{ inputs.veracode_policy_name }}" >> "$GITHUB_OUTPUT"
            
            # For√ßar policy 
            declare -A POLICY_MAP
            POLICY_MAP["python.py"]="AFRIKA_AST"
            POLICY_MAP["aplica-o_vul_py"]="AFRIKA_AST"
            POLICY_MAP["verademo3"]="AFRIKA_AST"
            
            ###colocar os outros projetos
            
            if [[ ${POLICY_MAP[${{ inputs.project_veracode }}]} != "" ]]; then
                            echo "For√ßar policy de ${{ inputs.veracode_policy_name }} para ${POLICY_MAP[${{ inputs.project_veracode }}]}"
                            echo "policy_veracode_sub=${POLICY_MAP[${{ inputs.project_veracode }}]}" >> "$GITHUB_OUTPUT"
            fi
          
      - name: Executar Veracode Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.APIID_VERACODE }}
          vkey: ${{ secrets.APIKEY_VERACODE }}
          file: ${{ steps.detect_artifact.outputs.artifact_file }} --issue_details true
          veracode_policy_name: ${{ steps.policy-name-sub.outputs.policy_veracode_sub }}
          #fail_build: true
          fail_build: ${{ inputs.environment == 'prod' }}

      - uses: actions/upload-artifact@v4
        with:
          name: ScanResults
          path: results.json

# ------------------------------------------------------
# JOB 4 ‚Äî SAST
# ------------------------------------------------------
  SAST:
    needs: autopack
    runs-on: ubuntu-24.04
    steps:
    # 1. baixa o artefato gerado pelo AutoPack
    - uses: actions/download-artifact@v4
      with: { name: analysisPack }

    # 2. baixa o wrapper Java do Veracode
    - run: curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar

    # 3. executa o SAST usando apenas analysisPack.zip
    - name: Executar Veracode SAST
      env:
        VID:  ${{ secrets.APIID_VERACODE }}
        VKEY: ${{ secrets.APIKEY_VERACODE }}
        ENVIRONMENT: ${{ inputs.environment }}
      shell: bash
      run: |
        ARTIFACT="analysisPack.zip"
        [[ ! -f "$ARTIFACT" ]] && { echo "::error::analysisPack.zip n√£o encontrado"; exit 1; }

        if [ "$ENVIRONMENT" = "prod" ]; then
          CREATESANDBOX=false
          SANDBOX_OPT=""
        else
          CREATESANDBOX=true
          SANDBOX_OPT="-sandboxname $ENVIRONMENT"
        fi

        java -jar vosp-api-wrappers-java-24.7.14.0.jar \
          -vid $VID -vkey $VKEY \
          -action uploadandscan \
          -appname "${{ inputs.project_veracode }}" \
          -version "${{ github.run_id }}" \
          -filepath "$ARTIFACT" \
          -createprofile true \
          -deleteincompletescan 2 \
          -createsandbox $CREATESANDBOX \
          $SANDBOX_OPT



