name: Veracode Template

on:
  workflow_call:
    inputs:
      build-id:
        description: 'ID da build'
        required: true
        type: string
      project_veracode:
        description: 'Project'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        type: string

env:
  project: ${{ inputs.project_veracode }}
  environment: ${{ inputs.environment }}

jobs:
  autopack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Detectar Ferramenta de Build
        id: detect_build
        run: |
          BUILD_GRADLE=$(find . -name "build.gradle" -o -name "build.gradle.kts" | head -n 1)

          if [ -f "pom.xml" ]; then
            echo "build_tool=maven" >> $GITHUB_ENV
          elif [ -n "$BUILD_GRADLE" ]; then
            echo "build_tool=gradle" >> $GITHUB_ENV
            echo "GRADLE_PATH=$(dirname $BUILD_GRADLE)" >> $GITHUB_ENV
            echo "Arquivo de build encontrado em: $BUILD_GRADLE"
          else
            echo "Nenhum arquivo de build encontrado (pom.xml ou build.gradle*). Abortando."
            exit 1
          fi

      - name: Ajustar Diretório do Gradle
        if: env.build_tool == 'gradle'
        run: |
          cd ${{ env.GRADLE_PATH }}
          echo "Executando build dentro de: $(pwd)"

      - name: Verificar `settings.gradle`
        if: env.build_tool == 'gradle'
        run: |
          SETTINGS_GRADLE="${{ env.GRADLE_PATH }}/settings.gradle"
          if ! grep -q "include ':salesforce'" "$SETTINGS_GRADLE"; then
            echo "O módulo 'salesforce' não está no settings.gradle! Adicionando..."
            echo "include ':salesforce'" >> "$SETTINGS_GRADLE"
            echo "Módulo 'salesforce' adicionado ao settings.gradle"
          else
            echo "O módulo 'salesforce' já está presente no settings.gradle."
          fi

      - name: Verificar `build.gradle` do `salesforce`
        if: env.build_tool == 'gradle'
        run: |
          SALESFORCE_PATH="${{ env.GRADLE_PATH }}/salesforce"
          if [ ! -f "$SALESFORCE_PATH/build.gradle" ]; then
            echo "O arquivo build.gradle do módulo salesforce está ausente! Criando..."
            mkdir -p "$SALESFORCE_PATH"
            cat <<EOF > "$SALESFORCE_PATH/build.gradle"
            plugins {
                id 'java'
            }
            EOF
            echo "build.gradle criado para 'salesforce'"
          else
            echo "O módulo 'salesforce' já contém um build.gradle."
          fi

      - name: Forçar Java 17 no Gradle
        if: env.build_tool == 'gradle'
        run: |
          echo "org.gradle.java.home=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.14-7/x64" >> gradle.properties
          echo "Gradle configurado para usar Java 17."

      - name: Build com Gradle (Debug)
        if: env.build_tool == 'gradle'
        run: |
          cd ${{ env.GRADLE_PATH }}
          if [ -f "./gradlew" ]; then
            chmod +x gradlew
            ./gradlew clean build --info --stacktrace
          else
            gradle clean build --info --stacktrace
          fi

      - name: Publicar Artefato para Análise
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
          retention-days: 1

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Executar Veracode SCA
        continue-on-error: true
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL https://download.sourceclear.com/ci.sh | bash -s – scan --update-advisor --allow-dirty

  pipeline_scan:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode Pipeline Scanner
        run: curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

      - name: Extrair Veracode Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip -d ${{ github.workspace }}/scanner
        
      - name: Corrigir Permissões do Artefato
        run: |
          chmod +r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip || true
          chmod +r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.jar || true
          chmod +r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.war || true
          
      - name: Executar Veracode Pipeline Scan
        id: pipeline_scan
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
        run: |
          # Procura pelo arquivo WAR
          WAR_FILE=$(find . -name "*.war" | head -n 1)
          # Procura pelo arquivo JAR (excluindo o pipeline-scan.jar)
          JAR_FILE=$(find target/ -name "*.jar" | head -n 1)
          JAR_FILE=$(find target/ -name "*.jar" | head -n 1)
          
          if [ -f "$WAR_FILE" ]; then
            echo "Aplicação WAR detectada. Usando arquivo: $WAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$WAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          elif [ -f "$JAR_FILE" ]; then
            echo "Java build detectado. Usando arquivo: $JAR_FILE"
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file "$JAR_FILE" --issue_details true --fail_on_severity="Very High, High"
          else
            echo "Nenhum WAR ou JAR encontrado. Usando analysisPack.zip."
            java -jar ${{ github.workspace }}/scanner/pipeline-scan.jar \
              -vid $VID -vkey $VKEY \
              --file analysisPack.zip --issue_details true --fail_on_severity="Very High, High"
          fi

  sast:
    runs-on: ubuntu-latest
    needs: autopack
    steps:
      - name: Baixar Artefato para Análise SAST
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode SAST Wrapper
        run: |
          curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar

      - name: Executar Veracode SAST
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          # Verifica se existe um WAR
          WAR_FILE=$(find . -maxdepth 2 -name "*.war" | head -n 1)
          if [ -f "$WAR_FILE" ]; then
            echo "Aplicação WAR detectada. Usando arquivo: $WAR_FILE"
            ARTIFACT="$WAR_FILE"
          else
            # Se não houver WAR, procura por um JAR (excluindo o vosp-api-wrappers)
            JAR_FILE=$(find . -maxdepth 2 -name "*.jar" | head -n 1)
            if [ -f "$JAR_FILE" ]; then
              echo "Java build detectado. Usando arquivo: $JAR_FILE"
              ARTIFACT="$JAR_FILE"
            else
              echo "Nenhum WAR ou JAR encontrado. Usando analysisPack.zip."
              ARTIFACT="analysisPack.zip"
            fi
          fi
      
          if [ "$ENVIRONMENT" == "prod" ]; then
            echo "Executando SAST em ambiente de produção..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid $VID -vkey $VKEY \
              -action uploadandscan \
              -appname "${{ inputs.project_veracode }}" \
              -version "${{ github.run_id }}" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox false
          else
            echo "Executando SAST em ambiente de sandbox..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid $VID -vkey $VKEY \
              -action uploadandscan \
              -appname "${{ inputs.project_veracode }}" \
              -version "${{ github.run_id }}" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox true \
              -sandboxname "$ENVIRONMENT"
          fi
