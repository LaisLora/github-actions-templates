name: Veracode-PHP Template

########################################################
# 0. Parâmetros do workflow reutilizável
########################################################
on:
  workflow_call:
    inputs:
      build-id:
        description: ID único da build
        required: true
        type: string

      environment:
        description: Ambiente (dev, qa, prod)
        required: true
        type: string

      project_veracode:
        description: Nome lógico do projeto no Veracode
        required: true
        type: string

      veracode_policy_name:
        description: Policy a aplicar (override opcional)
        required: false
        type: string
        default: AFRIKA_AST

########################################################
jobs:
########################################################

# ------------------------------------------------------
# JOB 1 — AutoPack (PHP + Composer)
# ------------------------------------------------------
  AutoPack:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      # ② Instala o PHP + Composer
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php_version || '8.2' }}
          tools: composer:v2        # sempre Composer 2.x

      # ③ Descobre o composer.json (primeiro que aparecer) e instala deps
      - name: Composer install
        id: comp
        shell: bash
        run: |
          FILE=$(git ls-files -- */composer.json | head -n1)
          if [[ -z "$FILE" ]]; then
            echo "::error::Nenhum composer.json encontrado"; exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "composer_dir=$DIR" >>"$GITHUB_OUTPUT"
          echo "🎼  composer.json localizado em: $DIR"

          composer --working-dir="$DIR" install \
            --no-interaction --prefer-dist --no-progress

      # Empacota com Veracode CLI (mesma lógica)
      - name: Veracode Auto-Pack
        shell: bash
        run: |
          OUT="$GITHUB_WORKSPACE/artifacts/${{ inputs.build-id }}"
          mkdir -p "$OUT"

          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode package \
            --source "${{ steps.comp.outputs.composer_dir }}" \
            --output "$OUT" \
            --trust

          # padroniza: unzip → rezip → analysisPack.zip
          find "$OUT" -name '*.zip' | while read z; do unzip -o -d "$(dirname "$z")" "$z"; done
          rm -f "$OUT"/*.zip
          (cd "$OUT" && zip -rq analysisPack.zip .)
          echo "Empacotado: $OUT/analysisPack.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: artifacts/${{ inputs.build-id }}/analysisPack.zip
# JOB 2 — SCA
# ------------------------------------------------------
  SCA:
    needs: AutoPack
    runs-on: ubuntu-24.04
    env:
      SRCCLR_API_TOKEN: ${{ secrets.SCA_ORGANIZACIONAL }}
      WORKSPACE_PY:     ${{ secrets.WORKSPACE_PY }}
      WORKSPACE_PHP: ${{ secrets.WORKSPACE_PHP }}
      WORKSPACE_AKS:    ${{ secrets.WORKSPACE_AKS }}
      WORKSPACE_KAFKA:  ${{ secrets.WORKSPACE_KAFKA }}

    steps:
      - uses: actions/checkout@v4
      - name: Resolve workspace slug
        id: slug
        shell: bash
        run: |
          declare -A MAP=( ["python.py"]="WORKSPACE_PY"
                           ["aplica-o_vul_py"]="WORKSPACE_PY"
                           ["Sitebase"]="WORKSPACE_PHP" 
                           
                           #Coloque acima os projetos e seus respectivos workspaces )
                           
          secret="${MAP[${{ inputs.project_veracode }}]}"
          [[ -z "$secret" ]] && { echo "::error::Projeto sem workspace"; exit 1; }
          echo "slug=${!secret}" >> $GITHUB_OUTPUT

      - name: Run Veracode SCA
        env:
          SRCCLR_WORKSPACE_SLUG: ${{ steps.slug.outputs.slug }}
        run: |
          curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --update-advisor --uri-as-name --recursive

# ------------------------------------------------------
# JOB 3 — Pipeline Scan
# ------------------------------------------------------
  Scan:
    name: ⏱️ Veracode Pipeline Scan
    runs-on: ubuntu-24.04
    needs: AutoPack
    
    steps:
      # 1) Baixa o artifact com nome 'analysisPack'
      - name: Baixar Artefato para Análise
        uses: actions/download-artifact@v4
        with:
          name: analysisPack
  
      # 2) (Opcional) Listar arquivos baixados para confirmar o que veio
      
  
      - name: Detectar arquivo de análise
        id: detect_artifact
        run: |
            if [ -f "analysisPack.zip" ]; then
              echo "Usando analysisPack.zip."
              echo "artifact_file=analysisPack.zip" >> $GITHUB_OUTPUT
            else
              echo "Erro: analysisPack.zip não encontrado"
            fi

      - name: Policy Name Substitution
        id: policy-name-sub
        run: |
        
            # Setar policy default
            echo "policy_veracode_sub=${{ inputs.veracode_policy_name }}" >> "$GITHUB_OUTPUT"
            
            # Forçar policy 
            declare -A POLICY_MAP
            POLICY_MAP["python.py"]="AFRIKA_AST"
            POLICY_MAP["aplica-o_vul_py"]="AFRIKA_AST"
            POLICY_MAP["app_vul_php"]="AFRIKA_AST"
            ###colocar os outros projetos
            
            if [[ ${POLICY_MAP[${{ inputs.project_veracode }}]} != "" ]]; then
                            echo "Forçar policy de ${{ inputs.veracode_policy_name }} para ${POLICY_MAP[${{ inputs.project_veracode }}]}"
                            echo "policy_veracode_sub=${POLICY_MAP[${{ inputs.project_veracode }}]}" >> "$GITHUB_OUTPUT"
            fi
          
      - name: Executar Veracode Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.APIID_VERACODE }}
          vkey: ${{ secrets.APIKEY_VERACODE }}
          file: ${{ steps.detect_artifact.outputs.artifact_file }} --issue_details true
          veracode_policy_name: ${{ steps.policy-name-sub.outputs.policy_veracode_sub }}
          #fail_build: true
          fail_build: ${{ inputs.environment == 'prod' }}

      - uses: actions/upload-artifact@v4
        with:
          name: ScanResults
          path: results.json

# ------------------------------------------------------
# JOB 4 — SAST
# ------------------------------------------------------
  SAST:
    needs: AutoPack
    runs-on: ubuntu-24.04
    steps:
    # 1. baixa o artefato gerado pelo AutoPack
    - uses: actions/download-artifact@v4
      with: { name: analysisPack }

    # 2. baixa o wrapper Java do Veracode
    - run: curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar

    # 3. executa o SAST usando apenas analysisPack.zip
    - name: Executar Veracode SAST
      env:
        VID:  ${{ secrets.APIID_VERACODE }}
        VKEY: ${{ secrets.APIKEY_VERACODE }}
        ENVIRONMENT: ${{ inputs.environment }}
      shell: bash
      run: |
        ARTIFACT="analysisPack.zip"
        [[ ! -f "$ARTIFACT" ]] && { echo "::error::analysisPack.zip não encontrado"; exit 1; }

        if [ "$ENVIRONMENT" = "prod" ]; then
          CREATESANDBOX=false
          SANDBOX_OPT=""
        else
          CREATESANDBOX=true
          SANDBOX_OPT="-sandboxname $ENVIRONMENT"
        fi

        java -jar vosp-api-wrappers-java-24.7.14.0.jar \
          -vid $VID -vkey $VKEY \
          -action uploadandscan \
          -appname "${{ inputs.project_veracode }}" \
          -version "${{ github.run_id }}" \
          -filepath "$ARTIFACT" \
          -createprofile true \
          -deleteincompletescan 2 \
          -createsandbox $CREATESANDBOX \
          $SANDBOX_OPT
