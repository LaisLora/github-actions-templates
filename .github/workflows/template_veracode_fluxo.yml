# =====================================================================
# Veracode DevSecOps Workflow - Fluxo Ilustrativo
# =====================================================================
#
#                          FLUXO DO PIPELINE
#
#  Start
#    │
#    ├──> Checkout do Código
#    │       └──→ Veracode SCA (paralelo)
#    │
#    ├──> Preparar Ambiente
#    │
#    ├──> Verificação de Governança
#    │
#    ├──> Compilar Projeto (se necessário conforme linguagem)
#    │
#    ├──> Testes Appsec
#    │       ├──→ Pipeline Scan
#    |       ├──→ Quality Gate
#    │       ├──→ SAST 
#    │       └──→ Envio Issues
#    │
#    ├──> Sistema de regra ou testes QA (ilustrativo)
#    │
#    ├──> Ofuscar JavaScript (ilustrativo)
#    │
#    ├──> Publicar artefato (ilustrativo)
#    └──> Deploy (ilustrativo)
#
# =====================================================================

name: Veracode DevSecOps 

on:
  workflow_call:
    inputs:
      build-id:
        required: true
        type: string
      project_veracode:
        required: true
        type: string
      environment:
        required: true
        type: string
      veracode_policy_name:
        required: true
        type: string

env:
  PROJECT: ${{ inputs.project_veracode }}
  ENVIRONMENT: ${{ inputs.environment }}

jobs:
  checkout:
    name: Checkout do Código
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

  preparar-ambiente:
    name: Prepar:contentReference[oaicite:4]{index=4}: echo "Ambiente pronto."

  governanca:
    name: Verificação de Governança
    runs-on: ubuntu-latest
    needs: [preparar-ambiente]
    steps:
      - name: Validar políticas de segurança e padrões
        run: echo "Governança validada."

  sca:
    name: Veracode SCA (paralelo)
    runs-on: ubuntu-24.04
    needs: [checkout]
    steps:
      - name: Executar Veracode SCA
      :contentReference[oaicite:5]{index=5}un: |
          curl -sSL https://:contentReference[oaicite:6]{index=6}: AutoPack (detecção, build e:contentReference[oaicite:7]{index=7}ps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Detectar Projeto Java-Maven
        id: check_maven
        run: |
          if [ -f "pom.xml" ]; then
            echo "java_maven=true" >> $GITHUB_OUTPUT
          else
            echo "java_maven=false" >> $GITHUB_OUTPUT
          fi

      - name: Detectar versão do Java
        if: ${{ steps.check_maven.outputs.java_maven == 'true' }}
        id: detect_java
        run: |
          JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
          if [[ "$JAVA_VERSION" == "11" ]]; then
            JAVA_VERSION=$(grep -oPm1 "(?<=<java.version>)[^<]+" pom.xml || echo "11")
          fi
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Configurar JDK
        if: ${{ steps.check_maven.outputs.java_maven == 'true' }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.detect_java.outputs.java_version }}
          distribution: 'temurin'
          cache: maven

      - name: Compilar Projeto
        if: ${{ steps.check_maven.outputs.java_maven == 'true' }}
        run: mvn clean package

      - name: Empacotar com Veracode Autopack
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
          WAR_FILE=$(find target/ -name "*.war" | head -n 1)
          JAR_FILE=$(find target/ -name "*.jar" | head -n 1)
          if [ -f "$WAR_FILE" ]; then
            cp "$WAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war
          elif [ -f "$JAR_FILE" ]; then
            cp "$JAR_FILE" ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
          else
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output ${{ github.workspace }}/artifacts/${{ inputs.build-id }} --trust
            find ${{ github.workspace }}/artifacts/${{ inputs.build-id }} -name "*.zip" |
            while read filename; do unzip -o -d "$(dirname "$filename")" "$filename"; done
            rm -rf ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/*.zip
            zip analysisPack.zip -r ${{ github.workspace }}/artifacts/${{ inputs.build-id }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
          fi

      - name: Upload de Artefatos
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/analysisPack.zip
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.jar
            ${{ github.workspace }}/artifacts/${{ inputs.build-id }}/application.war

  appsec:
    name: Testes AppSec
    runs-on: ubuntu-24.04
    needs: [autopack]
    steps:
      - name: Baixar Artefatos
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Detectar arquivo para análise
        id: detect_artifact
        run: |
          WAR_FILE=$(find . -name "*.war" | head -n 1)
          JAR_FILE=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n 1)
          if [ -f "$WAR_FILE" ]; then
            echo "artifact_file=$WAR_FILE" >> $GITHUB_OUTPUT
          elif [ -f "$JAR_FILE" ]; then
            echo "artifact_file=$JAR_FILE" >> $GITHUB_OUTPUT
          else
            echo "artifact_file=analysisPack.zip" >> $GITHUB_OUTPUT

      - name: Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.APIID_VERACODE }}
          vkey: ${{ secrets.APIKEY_VERACODE }}
          file: ${{ steps.detect_artifact.outputs.artifact_file }}
          veracode_policy_name: ${{ inputs.veracode_policy_name }}
          fail_build: true

      - name: Quality Gate
        run: echo "Quality Gate: ${{ job.status }}"

      - name: Envio Issues
        run: echo "Criando issues em caso de falha..."

  regras-qa:
    name: Testes de Regras e QA (ilustrativo)
    runs-on: ubuntu-latest
    needs: [appsec]
    steps:
      - name: Executar testes funcionais ou linter
        run: echo "QA validado."

  obfuscacao:
    name: Ofuscar JavaScript (ilustrativo)
    runs-on: ubuntu-latest
    needs: [regras-qa]
    steps:
      - name: Ofuscar scripts JS
        run: npx javascript-obfuscator src/ --output dist/ --compact true --self-defending true

  publicar:
    name: Publicar Artefato (ilustrativo)
    runs-on: ubuntu-latest
    needs: [obfuscacao]
    steps:
      - name: Enviar para repositório de artefatos
        run: echo "Artefato publicado."

  deploy:
    name: Deploy para Produção (ilustrativo)
    runs-on: ubuntu-latest
    needs: [publicar]
    steps:
      - name: Preparar ambiente
        run: echo "Configurar produção..."
      - name: Realizar deploy
        run: echo "Deploy executado com sucesso."
